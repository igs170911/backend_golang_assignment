// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/repository/storage.go
//
// Generated by this command:
//
//	mockgen -source=./internal/domain/repository/storage.go -destination=./internal/mock/repository/storage.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	repository "parse_server/internal/domain/repository"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetSubscribedAddresses mocks base method.
func (m *MockStorage) GetSubscribedAddresses() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscribedAddresses")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetSubscribedAddresses indicates an expected call of GetSubscribedAddresses.
func (mr *MockStorageMockRecorder) GetSubscribedAddresses() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribedAddresses", reflect.TypeOf((*MockStorage)(nil).GetSubscribedAddresses))
}

// GetTransactions mocks base method.
func (m *MockStorage) GetTransactions(address string) []repository.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", address)
	ret0, _ := ret[0].([]repository.Transaction)
	return ret0
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockStorageMockRecorder) GetTransactions(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockStorage)(nil).GetTransactions), address)
}

// SaveTransaction mocks base method.
func (m *MockStorage) SaveTransaction(address string, tx repository.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveTransaction", address, tx)
}

// SaveTransaction indicates an expected call of SaveTransaction.
func (mr *MockStorageMockRecorder) SaveTransaction(address, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransaction", reflect.TypeOf((*MockStorage)(nil).SaveTransaction), address, tx)
}

// SubscribeAddress mocks base method.
func (m *MockStorage) SubscribeAddress(address string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubscribeAddress", address)
}

// SubscribeAddress indicates an expected call of SubscribeAddress.
func (mr *MockStorageMockRecorder) SubscribeAddress(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeAddress", reflect.TypeOf((*MockStorage)(nil).SubscribeAddress), address)
}
